package app.alan.reactmodule;

import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.FrameLayout;

import androidx.annotation.Nullable;

import com.alan.alansdk.Alan;
import com.alan.alansdk.AlanCallback;
import com.alan.alansdk.AlanConfig;
import com.alan.alansdk.button.AlanButton;
import com.alan.alansdk.events.EventCommand;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.uimanager.annotations.ReactPropGroup;

import org.json.JSONException;


public class AlanButtonViewManager extends SimpleViewManager<AlanButton> {

    public static final String REACT_CLASS = "RNTAlanButton";
    ReactApplicationContext mCallerContext;

    public AlanButtonViewManager(ReactApplicationContext reactContext) {
        mCallerContext = reactContext;
    }

    @Override
    public void updateExtraData(AlanButton root, Object extraData) {
        super.updateExtraData(root, extraData);
    }

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @Override
    public void receiveCommand(AlanButton root, int commandId, @javax.annotation.Nullable ReadableArray args) {
        super.receiveCommand(root, commandId, args);
    }

    @Override
    public AlanButton createViewInstance(ThemedReactContext context) {
        AlanManager.INSTANCE.requestAudioPermissions();

        return createButton();
    }

    private AlanButton createButton() {
        if (AlanManager.alanButton != null) {
            AlanManager.alanButton = null;
        }

        AlanButton cachedButton = new AlanButton(mCallerContext, null);

        cachedButton.requestAudioPermissions();

//        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(
//                1000, 200);
//        params.gravity = Gravity.BOTTOM | Gravity.END;
//        cachedButton.setLayoutParams(params);
//        cachedButton.setClickable(true);

//        cachedButton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                Log.i(REACT_CLASS, v.toString());
//            }
//        });
//        cachedButton.setVisibility(View.GONE);
        cachedButton.setHintPanelVisibility(true);

//        cachedButton.setTranslationZ(100.0f);
        AlanManager.alanButton = cachedButton;

        cachedButton.getSDK().registerCallback(new AlanCallback() {
            @Override
            public void onCommandReceived(EventCommand eventCommand) {
                super.onCommandReceived(eventCommand);
                Log.i(REACT_CLASS, eventCommand.toString());
                AlanEventEmitter.INSTANCE.onConnected(eventCommand.getData());
            }
        });
        return cachedButton;
    }

    private String host;
    private String projectId;
    private String authData;

    @ReactProp(name = "projectId")
    public void setProjectId(AlanButton alanButton, @Nullable String projectId) {
        Log.i(REACT_CLASS, "Called setProjectId with " + projectId);
        if (projectId != null && alanButton != null) {
            this.projectId = projectId;
            AlanConfig config = AlanConfig.builder()
                    .setServer(host)
                    .setProjectId(projectId)
                    .build();
            alanButton.initWithConfig(config);
        }
    }

    @ReactProp(name = "host")
    public void setHost(AlanButton alanButton, @Nullable String host) {
        Log.i(REACT_CLASS, "Called setHost with " + host);
        if (host != null && alanButton != null) {
            this.host = "wss://" + host;
            AlanConfig config = AlanConfig.builder()
                    .setProjectId(projectId)
                    .setServer(host)
                    .build();
            alanButton.initWithConfig(config);
        }
    }

    @ReactProp(name = "authData")
    public void setAuthData(AlanButton alanButton, @Nullable ReadableMap authData) {
        Log.i(REACT_CLASS, "Called setAuthData with " + authData.toString());
        if (authData != null && alanButton != null) {
            this.authData = authData.toString();
            AlanConfig config = AlanConfig.builder()
                    .setProjectId(projectId)
                    .setServer(host)
                    .setDataObject(authData.toString())
                    .build();
            alanButton.initWithConfig(config);
        }
    }

    @ReactProp(name = "params")
    public void setParams(AlanButton alanButton, @Nullable ReadableArray params) {
        Log.i(REACT_CLASS, "Called setParams with " + params.toString());
        this.projectId = params.getString(0);
        this.host = "wss://" + params.getString(1);
        try {
            if (!params.isNull(2)) {
                this.authData = AlanManager.toJSONObject(params.getMap(2)).toString();
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        String version = params.getString(3);
        if (host != null && alanButton != null) {
            this.host = host;
            AlanConfig config = AlanConfig.builder()
                    .setProjectId(projectId)
                    .setServer(host)
                    .setDataObject(authData)
                    .build();
            alanButton.initWithConfig(config);
        }
    }
//    @ReactPropGroup(names = {"projectId","host"})
//    public void setConfig(AlanButton alanButton, String projectId, String host) {
//        Log.i(REACT_CLASS, "Called setConfig with " + host + " . " + projectId);
//        if (projectId != null && alanButton != null) {
//            AlanConfig config = AlanConfig.builder()
//                    .setProjectId(projectId)
//                    .setServer(host)
//                    .build();
//            alanButton.initWithConfig(config);
//        }
//    }
//
//    @ReactPropGroup(names = {"projectId","host", "authData"})
//    public void setConfigWithAuthData(AlanButton alanButton, String projectId, String host, ReadableMap authData) {
//        Log.i(REACT_CLASS, "Called setConfigWithAuthData with " + host + " . " + projectId + ", authData: " + authData.toString());
//        if (projectId != null && alanButton != null) {
//            AlanConfig config = AlanConfig.builder()
//                    .setProjectId(projectId)
//                    .setServer(host)
//                    .setDataObject(authData.toString())
//                    .build();
//            alanButton.initWithConfig(config);
//        }
//    }


}