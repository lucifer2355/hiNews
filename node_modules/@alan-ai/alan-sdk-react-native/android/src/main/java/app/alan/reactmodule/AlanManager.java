package app.alan.reactmodule;

import android.Manifest;
import android.os.Build;
import android.util.Log;

import com.alan.alansdk.button.AlanButton;
import com.facebook.quicklog.identifiers.ReactNativeBridge;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.ReadableType;

import org.json.JSONException;
import org.json.JSONObject;

public class AlanManager extends ReactContextBaseJavaModule {

    private final static String REACT_CLASS = "AlanManager";

    public static AlanManager INSTANCE;

    public static final Integer REQUEST_CODE_AUDIO_PERMISSIONS = 9009;

    public static JSONObject toJSONObject(ReadableMap readableMap) throws JSONException {
        JSONObject jsonObject = new JSONObject();

        ReadableMapKeySetIterator iterator = readableMap.keySetIterator();

        while (iterator.hasNextKey()) {
            String key = iterator.nextKey();
            ReadableType type = readableMap.getType(key);

            switch (type) {
                case Null:
                    jsonObject.put(key, null);
                    break;
                case Boolean:
                    jsonObject.put(key, readableMap.getBoolean(key));
                    break;
                case Number:
                    jsonObject.put(key, readableMap.getDouble(key));
                    break;
                case String:
                    jsonObject.put(key, readableMap.getString(key));
                    break;
                case Map:
                    jsonObject.put(key, toJSONObject(readableMap.getMap(key)));
                    break;
                case Array:
//                    jsonObject.put(key, toJSONArray(readableMap.getArray(key)));
                    Log.w(REACT_CLASS, "Cannot serialize Array");
                    jsonObject.put(key, null);
                    break;
            }
        }

        return jsonObject;
    }

    static AlanButton alanButton;

    public AlanManager(ReactApplicationContext reactContext) {
        super(reactContext);
        INSTANCE = this;
    }

    void requestAudioPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            getCurrentActivity().requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO},
                    REQUEST_CODE_AUDIO_PERMISSIONS);
        }
    }

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @ReactMethod
    public void getVersion(Callback callback) {
        if (alanButton == null) {
            callback.invoke("--");
            return;
        }
        String version = alanButton.getSDK().getVersion();
        callback.invoke(version);
    }

    @ReactMethod
    public void showButton() {
        if (alanButton == null) {
            return;
        }
        alanButton.showButton();
    }


    @ReactMethod
    public void hideButton() {
        if (alanButton == null) {
            return;
        }
        alanButton.hideButton();
    }

    @ReactMethod
    public void removeButton() {
        if (alanButton == null) {
            return;
        }
        alanButton.deactivate();
        alanButton.getSDK().stop();
        alanButton.hideButton();
    }

    @ReactMethod
    public void activate() {
        if (alanButton == null) {
            return;
        }
        alanButton.activate();
    }

    @ReactMethod
    public void deactivate() {
        if (alanButton == null) {
            return;
        }
        alanButton.deactivate();
    }

    @ReactMethod
    public void callProjectApi(String method, ReadableMap data, Callback callback) {
        if (alanButton == null) {
            callback.invoke("No button available");
            return;
        }
        try {
            alanButton.callProjectApi(method, toJSONObject(data).toString(), (methodName, response, error) -> {
                if (error != null && !error.isEmpty()) {
                    Log.i("AlanResponse", methodName + " failed with: " + error);
                    callback.invoke(error, null);
                } else {
                    Log.i("AlanResponse", methodName + " response is: " + response);
                    callback.invoke(null, response);
                }
            });
        } catch (Exception e) {
            Log.e(REACT_CLASS, "[CallProjectAPI]" + e.getMessage());
        }
    }

    @ReactMethod
    public void setVisualState(ReadableMap data) {
        if (alanButton == null) {
            return;
        }
        try {
            alanButton.setVisualState(toJSONObject(data).toString());
        } catch (Exception e) {
            Log.e(REACT_CLASS, "[setVisualState]" + e.getMessage());
        }
    }

    @ReactMethod
    public void playText(String data) {
        if (alanButton == null) {
            return;
        }
        alanButton.playText(data);
    }

    @ReactMethod
    public void playCommand(ReadableMap data) {
        if (alanButton == null) {
            return;
        }
        try {
            Log.i(REACT_CLASS, toJSONObject(data).toString());
            alanButton.playCommand(toJSONObject(data).toString(), (methodName, response, error) -> {
                if (error != null && !error.isEmpty()) {
                    Log.i("AlanResponse", methodName + " failed with: " + error);
                } else {
                    Log.i("AlanResponse", methodName + " response is: " + response);
                }
            });
        } catch (Exception e) {
            Log.e(REACT_CLASS, e.getMessage());
        }
    }

    @ReactMethod
    public void isActive(Callback callback) {
        if (alanButton == null) {
            return;
        }
        boolean isActive = alanButton.isActive();
        callback.invoke(null, isActive);
    }


}
